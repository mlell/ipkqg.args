% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/argparsers.R
\name{argparsers}
\alias{argparsers}
\alias{arg_any}
\alias{arg_character}
\alias{arg_string}
\alias{arg_int}
\alias{arg_num}
\alias{arg_flag}
\alias{arg_numeric}
\alias{arg_logical}
\alias{arg_list}
\alias{arg_filename}
\title{Expect arguments with certain format}
\usage{
arg_any(ARGV, name = NULL, default, print = FALSE)

arg_character(ARGV, name = NULL, ...)

arg_string(ARGV, name = NULL, ...)

arg_int(ARGV, name = NULL, ...)

arg_num(ARGV, name = NULL, ...)

arg_flag(ARGV, name = NULL, ...)

arg_int(ARGV, name = NULL, ...)

arg_numeric(ARGV, name = NULL, ...)

arg_logical(ARGV, name = NULL, ...)

arg_list(ARGV, name = NULL, ...)

arg_filename(
  ARGV,
  name = NULL,
  ...,
  exists = NA,
  isDir = NA,
  read = FALSE,
  dash = NULL
)
}
\arguments{
\item{ARGV}{(All functions) The output of \code{\link[=getKVArgs]{getKVArgs()}}}

\item{name}{(string, all functions) The name of the argument}

\item{default}{(All functions) Value to return if the command line does not contain the argument.
If missing, an error is thrown if the command line misses this argument.}

\item{...}{One of these listed arguments. Forwarded to more generic argument parsers.}

\item{exists}{(logical scalar) If \code{TRUE} or \code{FALSE}, the file
given on the command line is checked to exist/not exist. If \code{NA}, no check
is performed.}

\item{isDir}{(logical scalar) If \code{TRUE} or \code{FALSE}, the file given on the
command line is checked to be a directory/not a directory. If \code{NA}, no
check is performed.}

\item{read}{(logical scalar) If \code{TRUE}, the file is read in and the resulting
R object is returned instead of the file name.}

\item{dash}{(character scalar) If not NULL a dash input denotes standard
input (value "stdin") or output (value "stdout"). A file object for the
respective stream (file("stdin") or stdout()) is returned. If}
}
\description{
Define the expected command line arguments of a script and check their
format.
}
\details{
This functions should be called at the top of a parameterized script to show
the command line interface of the script and assert the correct format of
the arguments.
}
\section{Functions}{
\itemize{
\item \code{arg_any}: Return the argument or a default without any type checks

\item \code{arg_character}: Expect a character vector (\code{arg=text} or \verb{arg+=text1 arg+=text2})

\item \code{arg_string}: Expect an argument that is a single string (character scalar)

\item \code{arg_int}: Expect a scalar integer argument

\item \code{arg_num}: Expect a scalar numeric argument

\item \code{arg_flag}: Expect a scalar logical argument

\item \code{arg_int}: Expect an integer vector

\item \code{arg_numeric}: Expect a numeric vector

\item \code{arg_logical}: Expect a logical vector

\item \code{arg_list}: Expect a character that is a list (\verb{arg:X=1 arg:Y=2})

\item \code{arg_filename}: Expect a file name. Optionally check file attributes and read the file
}}

\examples{
ARGS <- getKVArgs(c("A=1", "B:X=10", "B:Y = 11"))
arg_any(ARGS, "A")
## [1] "1"
arg_string(ARGS, c("B", "X"))
## [1] "10"

# ==== Files ==========
\dontrun{
# save list(a = 1, b = 2)
f <- tempfile(fileext=".qs")
qs::qsave(list(a=1, b=2), f)

# Whole list can be read by just giving A=<filename>.qs
ARGS <- getKVArgs(c(paste0("A=",f)))
arg_filename(ARGS, "A", read = TRUE)
## $a
## [1] 1
## $b
## [1] 2

# Load and extract only element "a" by adding "A?:extract=a"
ARGS <- getKVArgs(c(paste0("A=",f),"A?:extract=a"))
arg_filename(ARGS, "A", read = TRUE)
## [1] 1

}

}
